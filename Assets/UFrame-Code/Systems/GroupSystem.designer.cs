// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace TetrisDB {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using TetrisDB;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class GroupSystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<GroupComponent> _GroupComponentManager;
        
        private IEcsComponentManagerOf<SpawnComponent> _SpawnComponentManager;
        
        public IEcsComponentManagerOf<GroupComponent> GroupComponentManager {
            get {
                return _GroupComponentManager;
            }
            set {
                _GroupComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SpawnComponent> SpawnComponentManager {
            get {
                return _SpawnComponentManager;
            }
            set {
                _SpawnComponentManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            GroupComponentManager = ComponentSystem.RegisterComponent<GroupComponent>(3);
            SpawnComponentManager = ComponentSystem.RegisterComponent<SpawnComponent>(1);
            this.OnEvent<TetrisDB.GroupMoveEvent>().Subscribe(_=>{ GroupSystemGroupMoveEventPublisherFilter(_); }).DisposeWith(this);
            this.OnEvent<TetrisDB.ActiveGroupMoveRightEvent>().Subscribe(_=>{ GroupSystemActiveGroupMoveRightEventFilter(_); }).DisposeWith(this);
            this.OnEvent<TetrisDB.ActiveGroupMoveLeftEvent>().Subscribe(_=>{ GroupSystemActiveGroupMoveLeftEventFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.Kernel.GameReadyEvent>().Subscribe(_=>{ GroupSystemGameReadyFilter(_); }).DisposeWith(this);
            this.OnEvent<TetrisDB.GroupMoveEvent>().Subscribe(_=>{ GroupSystemGroupMoveEventFilter(_); }).DisposeWith(this);
            this.OnEvent<TetrisDB.ActiveGroupDownEvent>().Subscribe(_=>{ GroupSystemActiveGroupDownEventFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void GroupSystemGroupMoveEventPublisherHandler(TetrisDB.GroupMoveEvent data) {
            var handler = new GroupSystemGroupMoveEventPublisherHandler();
            handler.System = this;
            handler.Event = data;
            StartCoroutine(handler.Execute());
        }
        
        protected void GroupSystemGroupMoveEventPublisherFilter(TetrisDB.GroupMoveEvent data) {
            this.GroupSystemGroupMoveEventPublisherHandler(data);
        }
        
        protected virtual void GroupSystemActiveGroupMoveRightEventHandler(TetrisDB.ActiveGroupMoveRightEvent data, GroupComponent group) {
            var handler = new GroupSystemActiveGroupMoveRightEventHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void GroupSystemActiveGroupMoveRightEventFilter(TetrisDB.ActiveGroupMoveRightEvent data) {
            var GroupComponentItems = GroupComponentManager.Components;
            for (var GroupComponentIndex = 0
            ; GroupComponentIndex < GroupComponentItems.Count; GroupComponentIndex++
            ) {
                if (!GroupComponentItems[GroupComponentIndex].Enabled) {
                    continue;
                }
                this.GroupSystemActiveGroupMoveRightEventHandler(data, GroupComponentItems[GroupComponentIndex]);
            }
        }
        
        protected virtual void GroupSystemActiveGroupMoveLeftEventHandler(TetrisDB.ActiveGroupMoveLeftEvent data, GroupComponent group) {
            var handler = new GroupSystemActiveGroupMoveLeftEventHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void GroupSystemActiveGroupMoveLeftEventFilter(TetrisDB.ActiveGroupMoveLeftEvent data) {
            var GroupComponentItems = GroupComponentManager.Components;
            for (var GroupComponentIndex = 0
            ; GroupComponentIndex < GroupComponentItems.Count; GroupComponentIndex++
            ) {
                if (!GroupComponentItems[GroupComponentIndex].Enabled) {
                    continue;
                }
                this.GroupSystemActiveGroupMoveLeftEventHandler(data, GroupComponentItems[GroupComponentIndex]);
            }
        }
        
        protected virtual void GroupSystemGameReadyHandler(uFrame.Kernel.GameReadyEvent data) {
            var handler = new GroupSystemGameReadyHandler();
            handler.System = this;
            handler.Event = data;
            StartCoroutine(handler.Execute());
        }
        
        protected void GroupSystemGameReadyFilter(uFrame.Kernel.GameReadyEvent data) {
            this.GroupSystemGameReadyHandler(data);
        }
        
        protected virtual void GroupSystemGroupMoveEventHandler(TetrisDB.GroupMoveEvent data, GroupComponent group) {
            var handler = new GroupSystemGroupMoveEventHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void GroupSystemGroupMoveEventFilter(TetrisDB.GroupMoveEvent data) {
            var GroupComponentItems = GroupComponentManager.Components;
            for (var GroupComponentIndex = 0
            ; GroupComponentIndex < GroupComponentItems.Count; GroupComponentIndex++
            ) {
                if (!GroupComponentItems[GroupComponentIndex].Enabled) {
                    continue;
                }
                this.GroupSystemGroupMoveEventHandler(data, GroupComponentItems[GroupComponentIndex]);
            }
        }
        
        protected virtual void GroupSystemActiveGroupDownEventHandler(TetrisDB.ActiveGroupDownEvent data, GroupComponent group) {
            var handler = new GroupSystemActiveGroupDownEventHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void GroupSystemActiveGroupDownEventFilter(TetrisDB.ActiveGroupDownEvent data) {
            var GroupComponentItems = GroupComponentManager.Components;
            for (var GroupComponentIndex = 0
            ; GroupComponentIndex < GroupComponentItems.Count; GroupComponentIndex++
            ) {
                if (!GroupComponentItems[GroupComponentIndex].Enabled) {
                    continue;
                }
                this.GroupSystemActiveGroupDownEventHandler(data, GroupComponentItems[GroupComponentIndex]);
            }
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("f5df799b-e6f8-4754-bf76-52c70deaf444")]
    public partial class GroupSystem : GroupSystemBase {
        
        private static GroupSystem _Instance;
        
        public GroupSystem() {
            Instance = this;
        }
        
        public static GroupSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
